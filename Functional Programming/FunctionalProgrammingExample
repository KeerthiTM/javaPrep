import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class FunctionalProgrammingExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Filter even numbers
        List<Integer> evenNumbers = numbers.stream()
                .filter(isEven())
                .collect(Collectors.toList());
        System.out.println("Even numbers: " + evenNumbers);

        // Double each number
        List<Integer> doubledNumbers = numbers.stream()
                .map(doubleNumber())
                .collect(Collectors.toList());
        System.out.println("Doubled numbers: " + doubledNumbers);

        // Sum all odd numbers
        int sumOfOddNumbers = numbers.stream()
                .filter(isOdd())
                .reduce(0, Integer::sum);
        System.out.println("Sum of odd numbers: " + sumOfOddNumbers);
    }

    public static Predicate<Integer> isEven() {
        return number -> number % 2 == 0;
    }

    public static java.util.function.Function<Integer, Integer> doubleNumber() {
        return number -> number * 2;
    }

    public static Predicate<Integer> isOdd() {
        return number -> number % 2 != 0;
    }
}
